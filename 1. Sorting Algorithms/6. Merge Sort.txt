Merging two arrays in a sorted array.

mergeArrays(int arr1[], int arr2[], int n, int m)
{
    int arr[m + n];

    int i = 0, j = 0, k = 0;

    while (i < n && j < m)
    {
          if (arr1[i] < arr2[j])
		arr[k++] = arr1[i++];
          else
		arr[k++] = arr1[j++];
    }

    while (i < n)
	arr[k++] = arr[i++];

    while (j < m)
	arr[k++] = arr[j++];

    return arr;
}

So, this way we can sort two already sorted arrays in a single sorted array. Similarly we can also sort m sorted arrays in a single sorted array. This technique is 
called m-way sorting.

We can also use two-way sorting where we sort m arrays taking two at a time.

This is also used in merge sort.

Merge Sort:
MERGE Sort is a Divide and Conquer algorithm. It divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves.
The merge() function is used for merging two halves. The merge(arr, l, m, r) is a key process that assumes that arr[l..m] and arr[m+1..r] are sorted and merges the two
sorted sub-arrays into one.

   void merge(int arr[], int l, int mid, int r)
   {
        int i = l, j = mid + 1, k = 0;
        int temp[r - l + 1];
        
        while (i <= mid && j <= r)
        {
            if (arr[i] > arr[j])
                temp[k++] = arr[j++];
            else
                temp[k++] = arr[i++];
        }
        
        while (i <= mid)
        {
            temp[k++] = arr[i++];
        }
        
        while (j <= r)
        {
            temp[k++] = arr[j++];
        }
        
        for (int t = 0; t < k; t++)
            arr[t + l] = temp[t];
    }

    void mergeSort(int arr[], int l, int r)
    {
        if (l < r) {
            int mid = (l + r)/2;
            mergeSort (arr, l, mid);
            mergeSort (arr, mid + 1, r);
            merge (arr, l, mid, r);
        }
    }