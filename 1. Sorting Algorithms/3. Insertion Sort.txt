The array is virtually split into a sorted and an unsorted part. Values from the unsorted part are picked and placed at the correct position in the sorted part.

Algorithm 
To sort an array of size n in ascending order: 
1: Iterate from arr[1] to arr[n] over the array. 
2: Compare the current element (key) to its predecessor. 
3: If the key element is smaller than its predecessor, compare it to the elements before. Move the greater elements one position up to make space for the swapped
   element.

Time Complexity: O(N^2)
Space Complexity: O(1)

Note: All the properties (complexity, swaps, comparisons, etc.) are same in both bubble and insertion sort.

CODE:
for (int i = 1; i < n; i++)
{
     int j = i - 1;
     int key = arr[i];

     while (j > -1 && arr[j] > key)
     {
	arr[j + 1] = arr[j];
        j--;
     }

     arr[j + 1] = key;
}

Insertion sort is adaptive and stable by its nature.