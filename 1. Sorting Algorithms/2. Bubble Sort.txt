Bubble sort, sometimes referred to as sinking sort, is a simple comparison based sorting algorithm that repeatedly steps through the list, compares adjacent elements
and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted.

Ex. arr = [4, 3, 2, 1]
	After 1st iteration
		[3, 2, 1, 4]
	After 2nd iteration
		[2, 1, 3, 4]
	After 3rd iteration
		[1, 2, 3, 4]
    The array is sorted after 3 iterations.

In the ith iteration at max total number of swaps are n - i - 1.
The sort is called bubble sort because after each iteration the largest unsorted element is bubbled out of the array.

The maximum number of swaps and comparisons in an array of N elements are 1 + 2 + 3 + ... + (N - 1) = (N)(N - 1)/2 = (N^2)

Time Complexity: O(N^2)
Space Complexity: O(1)

If we do k iterations we can get k largest elements of array.

CODE:

for (int i = 0; i < n - 1; i ++)
{
    for (int j = 0; j < n - i - 1; j++)
    {
	if (arr[j] > arr[j + 1]
	{
	    swap(arr[j], arr[j + 1])
	}
    }
}

The algorithm can be made adaptive by using a boolean flag.

for (int i = 0; i < n - 1; i++)
{
    bool flag = true;
    for (int j = 0; j < n - i - 1; j++)
    {
	if (arr[j] > arr[j + 1]
	{
	    swap(arr[j], arr[j + 1])
	    flag = false;
	}
    }

    if (flag)
	break;
}

Now if the list is already sorted the time complexity would be O(N).

The sort is stable as the elements will not be swapped if they are equal. Thus preserving original order of duplicates.